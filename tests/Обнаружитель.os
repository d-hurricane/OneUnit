#Использовать asserts
#Использовать ".."

Перем Рефлектор;

&Тест
Процедура ТестПланФормируется() Экспорт

	// Дано

	МенеджерТестирования = МенеджерТестирования();

	// Когда

	ТестПлан = МенеджерТестирования.Обнаружить();

	// Тогда

	Ожидаем.Что(ТестПлан.Дети().Количество()).Равно(10);

#Область НаборБезКонструктора

	ИндексНабора = 0;

	ПроверитьТестНабор(
		ТестПлан.Дети().Получить(ИндексНабора),
		"НаборБезКонструктора",
		Списки.ИзЭлементов(),
		0,
		0,
		Карты.ИзЭлементов(
			"ПередВсеми", Списки.ИзЭлементов(),
			"ПередКаждым", Списки.ИзЭлементов(),
			"ПослеВсех", Списки.ИзЭлементов(),
			"ПослеКаждого", Списки.ИзЭлементов()
		)
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети()).ИмеетДлину(1);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"ПростоТестВНабореБезКонструктора",
		"ПростоТестВНабореБезКонструктора",
		"НаборБезКонструктора.ПростоТестВНабореБезКонструктора",
		ОбъединитьПути(".", "tests", "fixtures", "НаборБезКонструктора.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		0
	);

#КонецОбласти

#Область СломанныйНабор

	ИндексНабора = 1;

	ПроверитьТестНабор(
		ТестПлан.Дети().Получить(ИндексНабора),
		"СломанныйНабор",
		Списки.ИзЭлементов(),
		0,
		0,
		Карты.ИзЭлементов(
			"ПередВсеми", Списки.ИзЭлементов("ПередВсеми"),
			"ПередКаждым", Списки.ИзЭлементов(),
			"ПослеВсех", Списки.ИзЭлементов(),
			"ПослеКаждого", Списки.ИзЭлементов()
		)
	);

#КонецОбласти

#Область НаборВыключенный

	ИндексНабора = 2;

	ПроверитьТестНабор(
		ТестПлан.Дети().Получить(ИндексНабора),
		"НаборВыключенный",
		Списки.ИзЭлементов(),
		0,
		1,
		Карты.ИзЭлементов(
			"ПередВсеми", Списки.ИзЭлементов(),
			"ПередКаждым", Списки.ИзЭлементов(),
			"ПослеВсех", Списки.ИзЭлементов(),
			"ПослеКаждого", Списки.ИзЭлементов()
		)
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети()).ИмеетДлину(1);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"ЯНеДолженБылВызваться",
		"ЯНеДолженБылВызваться",
		"НаборВыключенный.ЯНеДолженБылВызваться",
		ОбъединитьПути(".", "tests", "fixtures", "НаборВыключенный.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		0
	);

#КонецОбласти

#Область НаборКомпанейский

	ИндексНабора = 3;

	ПроверитьТестНабор(
		ТестПлан.Дети().Получить(ИндексНабора),
		"НаборКомпанейский",
		Списки.ИзЭлементов(),
		0,
		0,
		Карты.ИзЭлементов(
			"ПередВсеми", Списки.ИзЭлементов(),
			"ПередКаждым", Списки.ИзЭлементов(),
			"ПослеВсех", Списки.ИзЭлементов(),
			"ПослеКаждого", Списки.ИзЭлементов()
		)
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети()).ИмеетДлину(2);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"Первый",
		"Первый",
		"НаборКомпанейский.Первый",
		ОбъединитьПути(".", "tests", "fixtures", "НаборКомпанейский.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(1),
		ТипыОпределенийТестов.Тест,
		"Второй",
		"Второй",
		"НаборКомпанейский.Второй",
		ОбъединитьПути(".", "tests", "fixtures", "НаборКомпанейский.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		0
	);

#КонецОбласти

#Область НаборОдиночка

	ИндексНабора = 4;

	ПроверитьТестНабор(
		ТестПлан.Дети().Получить(ИндексНабора),
		"НаборОдиночка",
		Списки.ИзЭлементов(),
		0,
		0,
		Карты.ИзЭлементов(
			"ПередВсеми", Списки.ИзЭлементов(),
			"ПередКаждым", Списки.ИзЭлементов(),
			"ПослеВсех", Списки.ИзЭлементов(),
			"ПослеКаждого", Списки.ИзЭлементов()
		),
		Истина
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети()).ИмеетДлину(2);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"Первый",
		"Первый",
		"НаборОдиночка.Первый",
		ОбъединитьПути(".", "tests", "fixtures", "НаборОдиночка.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(1),
		ТипыОпределенийТестов.Тест,
		"Второй",
		"Второй",
		"НаборОдиночка.Второй",
		ОбъединитьПути(".", "tests", "fixtures", "НаборОдиночка.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		0
	);

#КонецОбласти

#Область НаборПадающий

	ИндексНабора = 5;

	ПроверитьТестНабор(
		ТестПлан.Дети().Получить(ИндексНабора),
		"НаборПадающий",
		Списки.ИзЭлементов(),
		0,
		0,
		Карты.ИзЭлементов(
			"ПередВсеми", Списки.ИзЭлементов("ПередВсеми"),
			"ПередКаждым", Списки.ИзЭлементов(),
			"ПослеВсех", Списки.ИзЭлементов("ПослеВсех"),
			"ПослеКаждого", Списки.ИзЭлементов()
		)
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети()).ИмеетДлину(3);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"ЯПроигнорирован1",
		"ЯПроигнорирован1",
		"НаборПадающий.ЯПроигнорирован1",
		ОбъединитьПути(".", "tests", "fixtures", "НаборПадающий.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(1),
		ТипыОпределенийТестов.Тест,
		"ЯПроигнорирован2",
		"ЯПроигнорирован2",
		"НаборПадающий.ЯПроигнорирован2",
		ОбъединитьПути(".", "tests", "fixtures", "НаборПадающий.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(2),
		ТипыОпределенийТестов.Тест,
		"ЯПроигнорирован3",
		"ЯПроигнорирован3",
		"НаборПадающий.ЯПроигнорирован3",
		ОбъединитьПути(".", "tests", "fixtures", "НаборПадающий.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		0
	);

#КонецОбласти

#Область НаборСВыключеннымиТестами

	ИндексНабора = 6;

	ПроверитьТестНабор(
		ТестПлан.Дети().Получить(ИндексНабора),
		"НаборСВыключеннымиТестами",
		Списки.ИзЭлементов(),
		0,
		0,
		Карты.ИзЭлементов(
			"ПередВсеми", Списки.ИзЭлементов(),
			"ПередКаждым", Списки.ИзЭлементов(),
			"ПослеВсех", Списки.ИзЭлементов(),
			"ПослеКаждого", Списки.ИзЭлементов()
		)
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети()).ИмеетДлину(13);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"Выключен",
		"Выключен",
		"НаборСВыключеннымиТестами.Выключен",
		ОбъединитьПути(".", "tests", "fixtures", "НаборСВыключеннымиТестами.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		1
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(1),
		ТипыОпределенийТестов.Тест,
		"ВыключенЕслиИстина",
		"ВыключенЕслиИстина",
		"НаборСВыключеннымиТестами.ВыключенЕслиИстина",
		ОбъединитьПути(".", "tests", "fixtures", "НаборСВыключеннымиТестами.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		1
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(2),
		ТипыОпределенийТестов.Тест,
		"ВыключенНаОСWindows",
		"ВыключенНаОСWindows",
		"НаборСВыключеннымиТестами.ВыключенНаОСWindows",
		ОбъединитьПути(".", "tests", "fixtures", "НаборСВыключеннымиТестами.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		1
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(3),
		ТипыОпределенийТестов.Тест,
		"ВыключенНаОСLinux",
		"ВыключенНаОСLinux",
		"НаборСВыключеннымиТестами.ВыключенНаОСLinux",
		ОбъединитьПути(".", "tests", "fixtures", "НаборСВыключеннымиТестами.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		1
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(4),
		ТипыОпределенийТестов.Тест,
		"ВыключенНаОСMacOS",
		"ВыключенНаОСMacOS",
		"НаборСВыключеннымиТестами.ВыключенНаОСMacOS",
		ОбъединитьПути(".", "tests", "fixtures", "НаборСВыключеннымиТестами.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		1
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(5),
		ТипыОпределенийТестов.Тест,
		"ВыключенДляOneScriptМладшеДвойки",
		"ВыключенДляOneScriptМладшеДвойки",
		"НаборСВыключеннымиТестами.ВыключенДляOneScriptМладшеДвойки",
		ОбъединитьПути(".", "tests", "fixtures", "НаборСВыключеннымиТестами.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		1
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(6),
		ТипыОпределенийТестов.Тест,
		"ВыключенДляOneScriptСтаршеДвойки",
		"ВыключенДляOneScriptСтаршеДвойки",
		"НаборСВыключеннымиТестами.ВыключенДляOneScriptСтаршеДвойки",
		ОбъединитьПути(".", "tests", "fixtures", "НаборСВыключеннымиТестами.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		1
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(7),
		ТипыОпределенийТестов.Тест,
		"ВключенЕсли",
		"ВключенЕсли",
		"НаборСВыключеннымиТестами.ВключенЕсли",
		ОбъединитьПути(".", "tests", "fixtures", "НаборСВыключеннымиТестами.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		1
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(8),
		ТипыОпределенийТестов.Тест,
		"ВключенНаОСWindows",
		"ВключенНаОСWindows",
		"НаборСВыключеннымиТестами.ВключенНаОСWindows",
		ОбъединитьПути(".", "tests", "fixtures", "НаборСВыключеннымиТестами.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		1
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(9),
		ТипыОпределенийТестов.Тест,
		"ВключенНаОСLinux",
		"ВключенНаОСLinux",
		"НаборСВыключеннымиТестами.ВключенНаОСLinux",
		ОбъединитьПути(".", "tests", "fixtures", "НаборСВыключеннымиТестами.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		1
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(10),
		ТипыОпределенийТестов.Тест,
		"ВключенНаОСMacOS",
		"ВключенНаОСMacOS",
		"НаборСВыключеннымиТестами.ВключенНаОСMacOS",
		ОбъединитьПути(".", "tests", "fixtures", "НаборСВыключеннымиТестами.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		1
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(11),
		ТипыОпределенийТестов.Тест,
		"ВключенДляOneScriptМладшеДвойки",
		"ВключенДляOneScriptМладшеДвойки",
		"НаборСВыключеннымиТестами.ВключенДляOneScriptМладшеДвойки",
		ОбъединитьПути(".", "tests", "fixtures", "НаборСВыключеннымиТестами.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		1
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(12),
		ТипыОпределенийТестов.Тест,
		"ВключенДляOneScriptСтаршеДвойки",
		"ВключенДляOneScriptСтаршеДвойки",
		"НаборСВыключеннымиТестами.ВключенДляOneScriptСтаршеДвойки",
		ОбъединитьПути(".", "tests", "fixtures", "НаборСВыключеннымиТестами.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		1
	);

#КонецОбласти

#Область ПараметризованныйТест

	ИндексНабора = 7;

	ПроверитьТестНабор(
		ТестПлан.Дети().Получить(ИндексНабора),
		"ПараметризованныйТест",
		Списки.ИзЭлементов("Параметризованный"),
		0,
		0,
		Карты.ИзЭлементов(
			"ПередВсеми", Списки.ИзЭлементов(),
			"ПередКаждым", Списки.ИзЭлементов(),
			"ПослеВсех", Списки.ИзЭлементов(
				"ПроверитьЧтоВсеЗначенияСистемногоПеречисленияПрошли",
				"ПроверитьЧтоВсеЗначенияПользовательскогоПеречисленияПрошли"
			),
			"ПослеКаждого", Списки.ИзЭлементов()
		)
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети()).ИмеетДлину(7);

#Область ИсточникЗначение

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0),
		ТипыОпределенийТестов.Контейнер,
		"ИсточникЗначение",
		"ИсточникЗначение",
		"ПараметризованныйТест.ИсточникЗначение",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0).Дети()).ИмеетДлину(3);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"ИсточникЗначение",
		"[1, 2]",
		"ПараметризованныйТест.ИсточникЗначение.[1, 2]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(1 , 2),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0).Дети().Получить(1),
		ТипыОпределенийТестов.Тест,
		"ИсточникЗначение",
		"[3, 4]",
		"ПараметризованныйТест.ИсточникЗначение.[3, 4]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(3 , 4),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0).Дети().Получить(2),
		ТипыОпределенийТестов.Тест,
		"ИсточникЗначение",
		"[5, 6]",
		"ПараметризованныйТест.ИсточникЗначение.[5, 6]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(5 , 6),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

#КонецОбласти

#Область ИсточникНеопределено

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(1),
		ТипыОпределенийТестов.Контейнер,
		"ИсточникНеопределено",
		"ИсточникНеопределено",
		"ПараметризованныйТест.ИсточникНеопределено",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(1).Дети()).ИмеетДлину(1);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(1).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"ИсточникНеопределено",
		"[, ]",
		"ПараметризованныйТест.ИсточникНеопределено.[, ]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(Неопределено , Неопределено),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

#КонецОбласти

#Область ИсточникJSONЗначение

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(2),
		ТипыОпределенийТестов.Контейнер,
		"ИсточникJSONЗначение",
		"ИсточникJSONЗначение",
		"ПараметризованныйТест.ИсточникJSONЗначение",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(2).Дети()).ИмеетДлину(3);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(2).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"ИсточникJSONЗначение",
		"[1, 2]",
		"ПараметризованныйТест.ИсточникJSONЗначение.[1, 2]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(1 , 2),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(2).Дети().Получить(1),
		ТипыОпределенийТестов.Тест,
		"ИсточникJSONЗначение",
		"[3, 4]",
		"ПараметризованныйТест.ИсточникJSONЗначение.[3, 4]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(3, 4),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(2).Дети().Получить(2),
		ТипыОпределенийТестов.Тест,
		"ИсточникJSONЗначение",
		"[5, 6]",
		"ПараметризованныйТест.ИсточникJSONЗначение.[5, 6]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(5, 6),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

#КонецОбласти

#Область ИсточникJSONФайл

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(3),
		ТипыОпределенийТестов.Контейнер,
		"ИсточникJSONФайл",
		"ИсточникJSONФайл",
		"ПараметризованныйТест.ИсточникJSONФайл",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(3).Дети()).ИмеетДлину(3);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(3).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"ИсточникJSONФайл",
		"[1, 2]",
		"ПараметризованныйТест.ИсточникJSONФайл.[1, 2]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(1 , 2),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(3).Дети().Получить(1),
		ТипыОпределенийТестов.Тест,
		"ИсточникJSONФайл",
		"[3, 4]",
		"ПараметризованныйТест.ИсточникJSONФайл.[3, 4]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(3, 4),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(3).Дети().Получить(2),
		ТипыОпределенийТестов.Тест,
		"ИсточникJSONФайл",
		"[5, 6]",
		"ПараметризованныйТест.ИсточникJSONФайл.[5, 6]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(5, 6),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

#КонецОбласти

#Область ИсточникПеречислениеСистемное

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(4),
		ТипыОпределенийТестов.Контейнер,
		"ИсточникПеречислениеСистемное",
		"ИсточникПеречислениеСистемное",
		"ПараметризованныйТест.ИсточникПеречислениеСистемное",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(4).Дети()).ИмеетДлину(6);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(4).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"ИсточникПеречислениеСистемное",
		СтрШаблон("[%1]", СтатусСообщения.БезСтатуса),
		"ПараметризованныйТест.ИсточникПеречислениеСистемное." + СтрШаблон("[%1]", СтатусСообщения.БезСтатуса),
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(СтатусСообщения.БезСтатуса),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(4).Дети().Получить(1),
		ТипыОпределенийТестов.Тест,
		"ИсточникПеречислениеСистемное",
		СтрШаблон("[%1]", СтатусСообщения.Важное),
		"ПараметризованныйТест.ИсточникПеречислениеСистемное." + СтрШаблон("[%1]", СтатусСообщения.Важное),
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(СтатусСообщения.Важное),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(4).Дети().Получить(2),
		ТипыОпределенийТестов.Тест,
		"ИсточникПеречислениеСистемное",
		СтрШаблон("[%1]", СтатусСообщения.Внимание),
		"ПараметризованныйТест.ИсточникПеречислениеСистемное." + СтрШаблон("[%1]", СтатусСообщения.Внимание),
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(СтатусСообщения.Внимание),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(4).Дети().Получить(3),
		ТипыОпределенийТестов.Тест,
		"ИсточникПеречислениеСистемное",
		СтрШаблон("[%1]", СтатусСообщения.Информация),
		"ПараметризованныйТест.ИсточникПеречислениеСистемное." + СтрШаблон("[%1]", СтатусСообщения.Информация),
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(СтатусСообщения.Информация),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(4).Дети().Получить(4),
		ТипыОпределенийТестов.Тест,
		"ИсточникПеречислениеСистемное",
		СтрШаблон("[%1]", СтатусСообщения.Обычное),
		"ПараметризованныйТест.ИсточникПеречислениеСистемное." + СтрШаблон("[%1]", СтатусСообщения.Обычное),
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(СтатусСообщения.Обычное),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(4).Дети().Получить(5),
		ТипыОпределенийТестов.Тест,
		"ИсточникПеречислениеСистемное",
		СтрШаблон("[%1]", СтатусСообщения.ОченьВажное),
		"ПараметризованныйТест.ИсточникПеречислениеСистемное." + СтрШаблон("[%1]", СтатусСообщения.ОченьВажное),
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(СтатусСообщения.ОченьВажное),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

#КонецОбласти

#Область ИсточникПеречислениеПользовательское

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(5),
		ТипыОпределенийТестов.Контейнер,
		"ИсточникПеречислениеПользовательское",
		"ИсточникПеречислениеПользовательское",
		"ПараметризованныйТест.ИсточникПеречислениеПользовательское",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(5).Дети()).ИмеетДлину(2);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(5).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"ИсточникПеречислениеПользовательское",
		"[Успех]",
		"ПараметризованныйТест.ИсточникПеречислениеПользовательское.[Успех]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(РезультатыВыполненияТестов.Успех),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(5).Дети().Получить(1),
		ТипыОпределенийТестов.Тест,
		"ИсточникПеречислениеПользовательское",
		"[Ошибка]",
		"ПараметризованныйТест.ИсточникПеречислениеПользовательское.[Ошибка]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(РезультатыВыполненияТестов.Ошибка),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

#КонецОбласти

#Область ИсточникВыражение

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(6),
		ТипыОпределенийТестов.Контейнер,
		"ИсточникВыражение",
		"ИсточникВыражение",
		"ПараметризованныйТест.ИсточникВыражение",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(6).Дети()).ИмеетДлину(3);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(6).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"ИсточникВыражение",
		"[1, 2]",
		"ПараметризованныйТест.ИсточникВыражение.[1, 2]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(1 , 2),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(6).Дети().Получить(1),
		ТипыОпределенийТестов.Тест,
		"ИсточникВыражение",
		"[3, 4]",
		"ПараметризованныйТест.ИсточникВыражение.[3, 4]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(3, 4),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(6).Дети().Получить(2),
		ТипыОпределенийТестов.Тест,
		"ИсточникВыражение",
		"[5, 6]",
		"ПараметризованныйТест.ИсточникВыражение.[5, 6]",
		ОбъединитьПути(".", "tests", "fixtures", "ПараметризованныйТест.os"),
		0,
		Списки.ИзЭлементов(5, 6),
		Списки.ИзЭлементов("Параметризованный"),
		0
	);

#КонецОбласти

#КонецОбласти

#Область ПовторяемыйТест

	ИндексНабора = 8;

	ПроверитьТестНабор(
		ТестПлан.Дети().Получить(ИндексНабора),
		"ПовторяемыйТест",
		Списки.ИзЭлементов("Повторяемый"),
		0,
		0,
		Карты.ИзЭлементов(
			"ПередВсеми", Списки.ИзЭлементов(),
			"ПередКаждым", Списки.ИзЭлементов("ПередКаждым"),
			"ПослеВсех", Списки.ИзЭлементов(),
			"ПослеКаждого", Списки.ИзЭлементов("ПослеКаждого")
		)
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети()).ИмеетДлину(3);

#Область ТриРаза

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0),
		ТипыОпределенийТестов.Контейнер,
		"ТриРаза",
		"ТриРаза",
		"ПовторяемыйТест.ТриРаза",
		ОбъединитьПути(".", "tests", "fixtures", "ПовторяемыйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Повторяемый"),
		0
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0).Дети()).ИмеетДлину(3);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"ТриРаза",
		"Повторение 1 из 3",
		"ПовторяемыйТест.ТриРаза.Повторение 1 из 3",
		ОбъединитьПути(".", "tests", "fixtures", "ПовторяемыйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Повторяемый"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0).Дети().Получить(1),
		ТипыОпределенийТестов.Тест,
		"ТриРаза",
		"Повторение 2 из 3",
		"ПовторяемыйТест.ТриРаза.Повторение 2 из 3",
		ОбъединитьПути(".", "tests", "fixtures", "ПовторяемыйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Повторяемый"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0).Дети().Получить(2),
		ТипыОпределенийТестов.Тест,
		"ТриРаза",
		"Повторение 3 из 3",
		"ПовторяемыйТест.ТриРаза.Повторение 3 из 3",
		ОбъединитьПути(".", "tests", "fixtures", "ПовторяемыйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Повторяемый"),
		0
	);

#КонецОбласти

#Область ТриРазаИменной

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(1),
		ТипыОпределенийТестов.Контейнер,
		"ТриРазаИменной",
		"ТриРазаИменной",
		"ПовторяемыйТест.ТриРазаИменной",
		ОбъединитьПути(".", "tests", "fixtures", "ПовторяемыйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Повторяемый"),
		0
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(1).Дети()).ИмеетДлину(3);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(1).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"ТриРазаИменной",
		"ТриРазаИменной №1",
		"ПовторяемыйТест.ТриРазаИменной.ТриРазаИменной №1",
		ОбъединитьПути(".", "tests", "fixtures", "ПовторяемыйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Повторяемый"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(1).Дети().Получить(1),
		ТипыОпределенийТестов.Тест,
		"ТриРазаИменной",
		"ТриРазаИменной №2",
		"ПовторяемыйТест.ТриРазаИменной.ТриРазаИменной №2",
		ОбъединитьПути(".", "tests", "fixtures", "ПовторяемыйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Повторяемый"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(1).Дети().Получить(2),
		ТипыОпределенийТестов.Тест,
		"ТриРазаИменной",
		"ТриРазаИменной №3",
		"ПовторяемыйТест.ТриРазаИменной.ТриРазаИменной №3",
		ОбъединитьПути(".", "tests", "fixtures", "ПовторяемыйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Повторяемый"),
		0
	);

#КонецОбласти

#Область ТриРазаИменнойИменованный

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(2),
		ТипыОпределенийТестов.Контейнер,
		"ТриРазаИменнойИменованный",
		"Я именованный",
		"ПовторяемыйТест.Я именованный",
		ОбъединитьПути(".", "tests", "fixtures", "ПовторяемыйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Повторяемый", "ОтображаемоеИмя"),
		0
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(2).Дети()).ИмеетДлину(3);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(2).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"ТриРазаИменнойИменованный",
		"Я именованный №1",
		"ПовторяемыйТест.Я именованный.Я именованный №1",
		ОбъединитьПути(".", "tests", "fixtures", "ПовторяемыйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Повторяемый", "ОтображаемоеИмя"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(2).Дети().Получить(1),
		ТипыОпределенийТестов.Тест,
		"ТриРазаИменнойИменованный",
		"Я именованный №2",
		"ПовторяемыйТест.Я именованный.Я именованный №2",
		ОбъединитьПути(".", "tests", "fixtures", "ПовторяемыйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Повторяемый", "ОтображаемоеИмя"),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(2).Дети().Получить(2),
		ТипыОпределенийТестов.Тест,
		"ТриРазаИменнойИменованный",
		"Я именованный №3",
		"ПовторяемыйТест.Я именованный.Я именованный №3",
		ОбъединитьПути(".", "tests", "fixtures", "ПовторяемыйТест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов("Повторяемый", "ОтображаемоеИмя"),
		0
	);

#КонецОбласти

#Область Тест

	ИндексНабора = 9;

	ПроверитьТестНабор(
		ТестПлан.Дети().Получить(ИндексНабора),
		"Тест",
		Списки.ИзЭлементов(),
		0,
		0,
		Карты.ИзЭлементов(
			"ПередВсеми", Списки.ИзЭлементов(),
			"ПередКаждым", Списки.ИзЭлементов(),
			"ПослеВсех", Списки.ИзЭлементов(),
			"ПослеКаждого", Списки.ИзЭлементов()
		)
	);

	Ожидаем.Что(ТестПлан.Дети().Получить(ИндексНабора).Дети()).ИмеетДлину(2);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(0),
		ТипыОпределенийТестов.Тест,
		"Тест1",
		"Тест1",
		"Тест.Тест1",
		ОбъединитьПути(".", "tests", "fixtures", "Тест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		0
	);

	ПроверитьТест(
		ТестПлан.Дети().Получить(ИндексНабора).Дети().Получить(1),
		ТипыОпределенийТестов.Тест,
		"Тест2",
		"Я тест 2",
		"Тест.Я тест 2",
		ОбъединитьПути(".", "tests", "fixtures", "Тест.os"),
		0,
		Списки.ИзЭлементов(),
		Списки.ИзЭлементов(),
		0
	);

#КонецОбласти

#КонецОбласти

КонецПроцедуры

Процедура ПроверитьТестНабор(ТестНабор, Имя, Теги, Таймаут, Условия, ЖизненныйЦикл, ЭтоОдиночка = Ложь)

	Путь = ОбъединитьПути(".", "tests", "fixtures", Имя + ".os");

	Ожидаем.Что(ТестНабор).ИмеетТип("ОпределениеТестНабора");

	Ожидаем.Что(ТестНабор.Имя()).Равно(Имя);
	Ожидаем.Что(ТестНабор.ПолноеИмя()).Равно(Имя);
	Ожидаем.Что(ТестНабор.Путь()).Равно(Путь);
	Ожидаем.Что(Строка(ТестНабор)).Равно(Имя + " (" + Путь + ")");
	Ожидаем.Что(ТестНабор.ТестНабор()).ИмеетТип("oneunit_testcase_" + Имя);

	Если ЭтоОдиночка Тогда
		Ожидаем.Что(ТестНабор.ТестНабор()).Равно(ТестНабор.ТестНабор());
	Иначе
		Ожидаем.Что(ТестНабор.ТестНабор()).Не_().Равно(ТестНабор.ТестНабор());
	КонецЕсли;

	Ожидаем.Что(ТестНабор.Таймаут()).Равно(Таймаут);

	Ожидаем.Что(ТестНабор.Теги())
		.ИмеетТип("ФиксированныйСписок")
		.ИмеетДлину(Теги.Количество());

	Ожидаем.Что(ТестНабор.Теги().СодержитВсе(Теги)).Равно(Истина);

	Ожидаем.Что(ТестНабор.Условия())
		.ИмеетТип("ФиксированныйСписок")
		.ИмеетДлину(Условия);

	Для каждого МетодЖизненногоЦикла Из ЖизненныйЦикл.КлючиИЗначения() Цикл

		Результат = Рефлектор.ВызватьМетод(ТестНабор, МетодЖизненногоЦикла.Ключ);

		Ожидаем.Что(Результат)
			.ИмеетТип("ФиксированныйСписок")
			.ИмеетДлину(МетодЖизненногоЦикла.Значение.Количество());

		Ожидаем.Что(Результат.СодержитВсе(МетодЖизненногоЦикла.Значение)).Равно(Истина);

	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьТест(Тест, Тип, ИмяМетода, Имя, ПолноеИмя, Путь, Таймаут, Параметры, Теги, Условия)

	Ожидаем.Что(Тест).ИмеетТип("ОпределениеТеста");
	Ожидаем.Что(Тест.ТипОпределения()).Равно(Тип);
	Ожидаем.Что(Тест.ИмяМетода()).Равно(ИмяМетода);
	Ожидаем.Что(Тест.Имя()).Равно(Имя);
	Ожидаем.Что(Тест.ПолноеИмя()).Равно(ПолноеИмя);
	Ожидаем.Что(Тест.Путь()).Равно(Путь);
	Ожидаем.Что(Тест.Таймаут()).Равно(Таймаут);

	Ожидаем.Что(Тест.Параметры())
		.ИмеетТип("ФиксированныйСписок")
		.ИмеетДлину(Параметры.Количество());

	Ожидаем.Что(Тест.Параметры().СодержитВсе(Параметры)).Равно(Истина);

	Ожидаем.Что(Тест.Теги())
		.ИмеетТип("ФиксированныйСписок")
		.ИмеетДлину(Теги.Количество());

	Ожидаем.Что(Тест.Теги().СодержитВсе(Теги)).Равно(Истина);

	Ожидаем.Что(Тест.Условия())
		.ИмеетТип("ФиксированныйСписок")
		.ИмеетДлину(Условия);

КонецПроцедуры

Функция МенеджерТестирования()

	Детальки = Новый Соответствие;
	Детальки.Вставить("OneUnit.КаталогиТестов", "./tests/fixtures");

	Поделка = Новый Поделка(Новый СоветДругогоМастера().ЗначенияДеталек(Детальки));
	Поделка.ЗапуститьПриложение();
	Возврат Поделка.НайтиЖелудь("МенеджерТестирования");

КонецФункции

Рефлектор = Новый Рефлектор();
