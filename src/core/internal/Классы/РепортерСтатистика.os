#Использовать fluent
#Использовать "../../../shared"

#Область ОписаниеПеременных

Перем _Лог;
Перем _РежимВыводаЛога;

Перем СтатистикаТестПлана;
Перем СтатистикаТестНаборов;
Перем СтатистикаТестов;

Перем ЗавершенныеТесты;
Перем ПропущенныеТесты;

Перем ЗавершенныеНаборы;
Перем ПропущенныеНаборы;

Перем Ошибки;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция СтатистикаТестПлана() Экспорт
	Возврат СтатистикаТестПлана;
КонецФункции

Функция СтатистикаНабора(Знач ТестНабор) Экспорт

	Пока ТипЗнч(ТестНабор) <> Тип("ОпределениеТестНабора") Цикл
		ТестНабор = ТестНабор.Родитель();
	КонецЦикла;

	Возврат СтатистикаТестНаборов
		.ВычислитьЕслиОтсутствует(ТестНабор, "К -> Новый КартаСоответствие")
		.Получить();

КонецФункции

Функция СтатистикаТеста(Тест) Экспорт

	Возврат СтатистикаТестов
		.ВычислитьЕслиОтсутствует(Тест, "К -> Новый КартаСоответствие")
		.Получить();

КонецФункции

Функция ЗавершенныеНаборы() Экспорт
	Возврат ЗавершенныеНаборы;
КонецФункции

Функция ПропущенныеНаборы() Экспорт
	Возврат ПропущенныеНаборы;
КонецФункции

Функция ЗавершенныеТесты() Экспорт
	Возврат ЗавершенныеТесты;
КонецФункции

Функция ПропущенныеТесты() Экспорт
	Возврат ПропущенныеТесты;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

&ПодпискаНаСобытие("ИсполнениеТестПланНачало")
Процедура ИсполнениеТестПланНачало(ТестПлан) Экспорт

	СтатистикаТестПлана   = Новый КартаСоответствие();
	СтатистикаТестНаборов = Новый КартаСоответствие();
	СтатистикаТестов      = Новый КартаСоответствие();

	ЗавершенныеТесты      = Новый КартаСоответствие();
	ПропущенныеТесты      = Новый КартаСоответствие();

	ЗавершенныеНаборы     = Новый КартаСоответствие();
	ПропущенныеНаборы     = Новый КартаСоответствие();

	Ошибки = Новый КартаСоответствие;

	СтатистикаТестПлана.Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
	СтатистикаТестПлана.Вставить("ДатаНачала", МестноеВремя('00010101' + (ТекущаяУниверсальнаяДатаВМиллисекундах() / 1000)));

КонецПроцедуры

&ПодпискаНаСобытие("ИсполнениеТестПланКонец")
Процедура ИсполнениеТестПланКонец(ТестПлан) Экспорт

	СтатистикаТестПлана.Вставить("ВремяЗавершения", ТекущаяУниверсальнаяДатаВМиллисекундах());
	СтатистикаТестПлана.Вставить("ДатаЗавершения", МестноеВремя('00010101' + (ТекущаяУниверсальнаяДатаВМиллисекундах() / 1000)));

	Если Не Ошибки.Пусто() Тогда
		ВывестиОшибки();
	КонецЕсли;

	Если Не Ошибки.Пусто() Или _РежимВыводаЛога <> РежимыВыводаЛога.Ничего Тогда
		ВывестиСтатистику();
	КонецЕсли;

КонецПроцедуры

&ПодпискаНаСобытие("ИсполнениеТестНаборНачало")
Процедура ИсполнениеТестНаборНачало(ТестНабор) Экспорт
	СтатистикаНабора(ТестНабор).Вставить("ВремяНачала", ТекущаяУниверсальнаяДатаВМиллисекундах());
	СтатистикаНабора(ТестНабор).Вставить("ДатаНачала", МестноеВремя('00010101' + (ТекущаяУниверсальнаяДатаВМиллисекундах() / 1000)));
	СтатистикаТестПлана.Слить("НаборовОбнаружено", 1, "Было, Добавлено -> Было + Добавлено");
КонецПроцедуры

&ПодпискаНаСобытие("ИсполнениеТестНаборКонец")
Процедура ИсполнениеТестНаборКонец(ТестНабор, Результат) Экспорт

	СтатистикаНабора(ТестНабор).Вставить("ВремяЗавершения", ТекущаяУниверсальнаяДатаВМиллисекундах());
	СтатистикаНабора(ТестНабор).Вставить("ДатаЗавершения", МестноеВремя('00010101' + (ТекущаяУниверсальнаяДатаВМиллисекундах() / 1000)));

	ЗавершенныеНаборы.Вставить(ТестНабор, Результат);

	Если Результат.Результат() = РезультатыВыполненияТестов.Ошибка Тогда
		Ошибки.Вставить(ТестНабор, Результат);
		СтатистикаТестПлана.Слить("НаборовОшибка", 1, "Было, Добавлено -> Было + Добавлено");
	Иначе

		// Проверим есть ли упавшие дети, если есть то набор для статистики ошибочный
		Если СтатистикаНабора(ТестНабор).ПолучитьИлиУмолчание("ТестовОшибка", 0) > 0 Тогда
			СтатистикаТестПлана.Слить("НаборовОшибка", 1, "Было, Добавлено -> Было + Добавлено");
		Иначе
			СтатистикаТестПлана.Слить("НаборовУспешно", 1, "Было, Добавлено -> Было + Добавлено");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&ПодпискаНаСобытие("ИсполнениеТестНаборПропущен")
Процедура ИсполнениеТестНаборПропущен(ТестНабор, Причина) Экспорт

	Время = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Дата  = МестноеВремя('00010101' + (ТекущаяУниверсальнаяДатаВМиллисекундах() / 1000));

	СтатистикаНабора(ТестНабор).Вставить("ВремяНачала", Время);
	СтатистикаНабора(ТестНабор).Вставить("ДатаНачала", Дата);
	СтатистикаНабора(ТестНабор).Вставить("ВремяЗавершения", Время);
	СтатистикаНабора(ТестНабор).Вставить("ДатаЗавершения", Дата);

	ПропущенныеНаборы.Вставить(ТестНабор, Причина);

	СтатистикаТестПлана.Слить("НаборовОбнаружено", 1, "Было, Добавлено -> Было + Добавлено");
	СтатистикаТестПлана.Слить("НаборовПропущено", 1, "Было, Добавлено -> Было + Добавлено");

КонецПроцедуры

&ПодпискаНаСобытие("ИсполнениеТестНачало")
Процедура ИсполнениеТестНачало(Тест) Экспорт

	Время = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Дата  = МестноеВремя('00010101' + (ТекущаяУниверсальнаяДатаВМиллисекундах() / 1000));

	СтатистикаТеста(Тест).Вставить("ВремяНачала", Время);
	СтатистикаТеста(Тест).Вставить("ДатаНачала", Дата);

	Если Тест.ТипОпределения() = ТипыОпределенийТестов.Тест Тогда
		СтатистикаТестПлана.Слить("ТестовОбнаружено", 1, "Было, Добавлено -> Было + Добавлено");
		СтатистикаНабора(Тест).Слить("ТестовОбнаружено", 1, "Было, Добавлено -> Было + Добавлено");
	КонецЕсли;

КонецПроцедуры

&ПодпискаНаСобытие("ИсполнениеТестКонец")
Процедура ИсполнениеТестКонец(Тест, Результат) Экспорт

	СтатистикаТеста(Тест).Вставить("ВремяЗавершения", ТекущаяУниверсальнаяДатаВМиллисекундах());
	СтатистикаТеста(Тест).Вставить("ДатаЗавершения", МестноеВремя('00010101' + (ТекущаяУниверсальнаяДатаВМиллисекундах() / 1000)));

	ЗавершенныеТесты.Вставить(Тест, Результат);

	Если Тест.ТипОпределения() = ТипыОпределенийТестов.Тест Тогда

		Если Результат.Результат() = РезультатыВыполненияТестов.Ошибка Тогда
			СтатистикаТестПлана.Слить("ТестовОшибка", 1, "Было, Добавлено -> Было + Добавлено");
			СтатистикаНабора(Тест).Слить("ТестовОшибка", 1, "Было, Добавлено -> Было + Добавлено");
			Ошибки.Вставить(Тест, Результат);
		Иначе
			СтатистикаТестПлана.Слить("ТестовУспешно", 1, "Было, Добавлено -> Было + Добавлено");
			СтатистикаНабора(Тест).Слить("ТестовУспешно", 1, "Было, Добавлено -> Было + Добавлено");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&ПодпискаНаСобытие("ИсполнениеТестПропущен")
Процедура ИсполнениеТестПропущен(Тест, Причина) Экспорт

	ПропущенныеТесты.Вставить(Тест, Причина);

	СтатистикаТестПлана.Слить("ТестовОбнаружено", 1, "Было, Добавлено -> Было + Добавлено");
	СтатистикаТестПлана.Слить("ТестовПропущено", 1, "Было, Добавлено -> Было + Добавлено");

	СтатистикаНабора(Тест).Слить("ТестовОбнаружено", 1, "Было, Добавлено -> Было + Добавлено");
	СтатистикаНабора(Тест).Слить("ТестовПропущено", 1, "Было, Добавлено -> Было + Добавлено");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВывестиОшибки()

	Для Каждого ТестИРезультат Из Ошибки.КлючиИЗначения() Цикл

		Тест                = ТестИРезультат.Ключ;
		РезультатВыполнения = ТестИРезультат.Значение;

		Сообщение = Новый Массив;

		Сообщение.Добавить(СтрШаблон(
			"
			|%1
			|──────────────────────────────────────────────────────────────────────────────────────────────────────────
			|",
			Тест.ПолноеИмя()
		));

		РезультатВыполнения.Причины()
			.ПроцессорКоллекции()
			// Пропустим первый стек вызовов, так как он содержит информацию о вызове теста
			.Обработать("Причина -> ?(ЗначениеЗаполнено(Причина.Причина), Причина.Причина, Причина)")
			.Обработать("Причина -> ТестированиеСлужебный.ПодробноеОписаниеОшибки(""Причина"", Причина)")
			.ДляКаждого("Причина -> Сообщение.Добавить(Причина)", Новый Структура("Сообщение", Сообщение));

		Вывод = РезультатВыполнения.Вывод();

		Если Не ПустаяСтрока(Вывод) Тогда

			Сообщение.Добавить(СтрШаблон(
				"
				|Вывод:
				|%1
				|",
				Вывод
			));

		КонецЕсли;

		_Лог.КритичнаяОшибка(СтрСоединить(Сообщение));

	КонецЦикла;

КонецПроцедуры

Процедура ВывестиСтатистику()

	ВремяНачала = СтатистикаТестПлана.ПолучитьИлиУмолчание("ВремяНачала", 0);
	ВремяЗавершения = СтатистикаТестПлана.ПолучитьИлиУмолчание("ВремяЗавершения", 0);

	НаборовОбнаружено = СтатистикаТестПлана.ПолучитьИлиУмолчание("НаборовОбнаружено", 0);
	НаборовПропущено = СтатистикаТестПлана.ПолучитьИлиУмолчание("НаборовПропущено", 0);
	НаборовУспешно = СтатистикаТестПлана.ПолучитьИлиУмолчание("НаборовУспешно", 0);
	НаборовОшибка = СтатистикаТестПлана.ПолучитьИлиУмолчание("НаборовОшибка", 0);

	ТестовОбнаружено = СтатистикаТестПлана.ПолучитьИлиУмолчание("ТестовОбнаружено", 0);
	ТестовПропущено = СтатистикаТестПлана.ПолучитьИлиУмолчание("ТестовПропущено", 0);
	ТестовУспешно = СтатистикаТестПлана.ПолучитьИлиУмолчание("ТестовУспешно", 0);
	ТестовОшибка = СтатистикаТестПлана.ПолучитьИлиУмолчание("ТестовОшибка", 0);

	МаксимумРазрядов = Макс(НаборовОбнаружено, НаборовПропущено);
	МаксимумРазрядов = Макс(МаксимумРазрядов, НаборовУспешно);
	МаксимумРазрядов = Макс(МаксимумРазрядов, НаборовОшибка);
	МаксимумРазрядов = Макс(МаксимумРазрядов, ТестовОбнаружено);
	МаксимумРазрядов = Макс(МаксимумРазрядов, ТестовПропущено);
	МаксимумРазрядов = Макс(МаксимумРазрядов, ТестовУспешно);
	МаксимумРазрядов = Макс(МаксимумРазрядов, ТестовОшибка);

	МаксимумРазрядов = СтрДлина(МаксимумРазрядов);

	_Лог.Информация(
		"
		|  Запуск тестов завершился за %1 мс
		|
		|[         %2 Наборов обнаружено         ]
		|[         %3 Наборов пропущено          ]
		|[         %4 Наборов успешных           ]
		|[         %5 Наборов ошибочных          ]
		|
		|[         %6 Тестов обнаружено          ]
		|[         %7 Тестов пропущено           ]
		|[         %8 Тестов успешных            ]
		|[         %9 Тестов ошибочных           ]
		|",
		ВремяЗавершения - ВремяНачала,
		ПривестиКДлине(НаборовОбнаружено, МаксимумРазрядов),
		ПривестиКДлине(НаборовПропущено, МаксимумРазрядов),
		ПривестиКДлине(НаборовУспешно, МаксимумРазрядов),
		ПривестиКДлине(НаборовОшибка, МаксимумРазрядов),
		ПривестиКДлине(ТестовОбнаружено, МаксимумРазрядов),
		ПривестиКДлине(ТестовПропущено, МаксимумРазрядов),
		ПривестиКДлине(ТестовУспешно, МаксимумРазрядов),
		ПривестиКДлине(ТестовОшибка, МаксимумРазрядов)
	);

КонецПроцедуры

Функция ПривестиКДлине(Знач Значение, Длина)

	Результат = Строка(Значение);

	Пока СтрДлина(Результат) < Длина Цикл
		Результат = " " + Результат;
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

&Желудь
Процедура ПриСозданииОбъекта(
	&Лог("oscript.lib.oneunit.core") Лог,
	&Деталька("OneUnit.РежимВыводаЛога") РежимВыводаЛога)

	_Лог = Лог;

	_РежимВыводаЛога = РежимВыводаЛога;

КонецПроцедуры
