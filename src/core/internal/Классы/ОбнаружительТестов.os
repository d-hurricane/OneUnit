#Использовать annotations
#Использовать collectionos
#Использовать "../../../shared"

Перем _Поделка;
Перем _Фильтры;
Перем _КорневыеАннотацииУсловий;

Функция Обнаружить() Экспорт

	ТестПлан = _Поделка.НайтиЖелудь("ТестПлан");

	ОпределенияТестовыхНаборов = _Поделка.ПолучитьОпределенияЖелудей("ТестовыйНабор");

	Для Каждого ОпределениеТестовогоНабора Из ОпределенияТестовыхНаборов Цикл

		ТестНабор = ЗарегистрироватьТестовыйНабор(ОпределениеТестовогоНабора, ТестПлан);

		Если Пропустить(ТестНабор) Тогда
			Продолжить;
		КонецЕсли;

		ТестПлан.ДобавитьТестовыйНабор(ТестНабор);

		Тесты = РаботаСАннотациями.НайтиМетодыСАннотацией(
			ОпределениеТестовогоНабора.Значение.Методы(),
			"Тестируемый"
		);

		Для каждого ТестМетод Из Тесты Цикл

			ОтображаемоеИмя = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(
				РаботаСАннотациями.ПолучитьАннотацию(ТестМетод, "ОтображаемоеИмя"),
				"Значение",
				ТестМетод.Имя
			);

			Таймаут = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(
				РаботаСАннотациями.ПолучитьАннотацию(ТестМетод, "Таймаут"),
				"Значение",
				0
			);

			Порядок = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(
				РаботаСАннотациями.ПолучитьАннотацию(ТестМетод, "Порядок"),
				"Значение",
				0
			);

			Теги = Массивы.КакСписок(РаботаСАннотациями.ПолучитьАннотации(ТестМетод, "Тег"))
				.ПроцессорКоллекции()
				.Обработать("Аннотация -> РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация)")
				.Получить("СписокМассив");

			Теги.ДобавитьВсе(ТестНабор.Теги());

			Условия = УсловияМетода(ТестМетод);

			Если РаботаСАннотациями.ПолучитьАннотацию(ТестМетод, "Тест") <> Неопределено Тогда

				Определение = _Поделка.НайтиЖелудь(
					"ОпределениеТеста",
					Массивы.ИзЭлементов(
						ТипыОпределенийТестов.Тест,
						ОтображаемоеИмя,
						Новый СписокМассив,
						ТестНабор,
						ТестМетод.Имя,
						Новый СписокМассив,
						Таймаут,
						Теги,
						Условия,
						Порядок
					)
				);

				Если Пропустить(Определение) Тогда
					Продолжить;
				КонецЕсли;

			ИначеЕсли РаботаСАннотациями.ПолучитьАннотацию(ТестМетод, "ТестШаблон") <> Неопределено Тогда

				Дети = Новый СписокМассив;

				Определение = _Поделка.НайтиЖелудь(
					"ОпределениеТеста",
					Массивы.ИзЭлементов(
						ТипыОпределенийТестов.Контейнер,
						ОтображаемоеИмя,
						Дети,
						ТестНабор,
						ТестМетод.Имя,
						Новый СписокМассив,
						Таймаут,
						Теги,
						Условия,
						Порядок
					)
				);

				Если Пропустить(Определение) Тогда
					Продолжить;
				КонецЕсли;

				ПоставщикКонтекста = _Поделка.НайтиЖелудь(
					РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(
						РаботаСАннотациями.ПолучитьАннотацию(ТестМетод, "ТестШаблон")
					)
				);

				Описания = ПоставщикКонтекста.ПредоставитьКонтекстыВызова(
					_Поделка.НайтиЖелудь(
						"КонтекстРасширения",
						Массивы.ИзЭлементов(
							ТестМетод,
							ОтображаемоеИмя,
							ТестНабор
						)
					)
				);

				Для каждого Описание Из Описания.Получить("СписокМассив") Цикл

					Дети.Добавить(
						_Поделка.НайтиЖелудь(
							"ОпределениеТеста",
							Массивы.ИзЭлементов(
								ТипыОпределенийТестов.Тест,
								Описание.Имя(),
								Новый СписокМассив,
								Определение,
								ТестМетод.Имя,
								Описание.Параметры(),
								Таймаут,
								Теги,
								Условия,
								Порядок
							)
						)
					);

				КонецЦикла;

			Иначе
				Продолжить;
			КонецЕсли;

			ТестНабор.ДобавитьТест(Определение);

		КонецЦикла;

	КонецЦикла;

	Возврат ТестПлан;

КонецФункции

Функция ЗарегистрироватьТестовыйНабор(ОпределениеТестовогоНабора, ТестПлан) Экспорт

	Конструктор = ОпределениеТестовогоНабора.Значение.Завязь().ДанныеМетода();

	Таймаут = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(
		РаботаСАннотациями.ПолучитьАннотацию(Конструктор, "Таймаут"),
		"Значение",
		0
	);

	Теги = Массивы.КакСписок(РаботаСАннотациями.ПолучитьАннотации(Конструктор, "Тег"))
		.ПроцессорКоллекции()
		.Обработать("Аннотация -> РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(Аннотация)")
		.Получить("СписокМассив");

	Методы = ОпределениеТестовогоНабора.Значение.Методы();

	ЖизненныйЦикл = Новый КартаСоответствие();
	ЖизненныйЦикл.Вставить("ПередВсеми", ИменаМетодовСАннотацией(Методы, "ПередВсеми"));
	ЖизненныйЦикл.Вставить("ПередКаждым", ИменаМетодовСАннотацией(Методы, "ПередКаждым"));
	ЖизненныйЦикл.Вставить("ПослеКаждого", ИменаМетодовСАннотацией(Методы, "ПослеКаждого"));
	ЖизненныйЦикл.Вставить("ПослеВсех", ИменаМетодовСАннотацией(Методы, "ПослеВсех"));

	ТестНабор = _Поделка.НайтиЖелудь(
		"ОпределениеТестНабора",
		Массивы.ИзЭлементов(
			ОпределениеТестовогоНабора,
			ТестПлан,
			Таймаут,
			Теги,
			УсловияМетода(Конструктор),
			ЖизненныйЦикл
		)
	);

	Возврат ТестНабор;

КонецФункции

Функция УсловияМетода(Метод)

	Условия = Новый СписокМассив;

	Для каждого ИмяАннотации Из _КорневыеАннотацииУсловий Цикл
		Для каждого Аннотация Из РаботаСАннотациями.ПолучитьАннотации(Метод, ИмяАннотации) Цикл
			Условия.Добавить(_Поделка.ПолучитьОпределениеАннотации(Аннотация.Имя).СоздатьОбъектАннотации(Аннотация));
		КонецЦикла;
	КонецЦикла;

	Возврат Условия;

КонецФункции

Функция ИменаМетодовСАннотацией(Методы, ИмяАннотации)

	Возврат Новый ФиксированныйСписок(
		ПроцессорыКоллекций.ИзКоллекции(РаботаСАннотациями.НайтиМетодыСАннотацией(Методы, ИмяАннотации))
			.Обработать("Метод -> Метод.Имя")
			.Получить("СписокМассив")
	);

КонецФункции

Функция Пропустить(Определение)

	Для каждого Фильтр Из _Фильтры Цикл
		Если Фильтр.Пропустить(Определение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

&Желудь
Процедура ПриСозданииОбъекта(
	&Пластилин Поделка,
	&Пластилин("Фильтр", Тип = "Список") Фильтры)

	_Поделка = Поделка;
	_Фильтры = Фильтры;

	_КорневыеАннотацииУсловий = Новый СписокМассив;
	_КорневыеАннотацииУсловий.Добавить("ВыключенЕсли");
	_КорневыеАннотацииУсловий.Добавить("ВключенЕсли");

КонецПроцедуры
