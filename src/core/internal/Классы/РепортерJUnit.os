#Использовать collectionos

Перем _ПутьКОтчету;

Перем _РепортерСтатистика;

&ПодпискаНаСобытие("ИсполнениеТестПланКонец")
Процедура ИсполнениеТестПланКонец(ТестПлан) Экспорт

	Если Не ЗначениеЗаполнено(_ПутьКОтчету) Тогда
		Возврат;
	КонецЕсли;

	ВывестиТестПлан(ТестПлан);

КонецПроцедуры

Процедура ВывестиТестПлан(ТестПлан)

	СтатистикаТестПлана =  _РепортерСтатистика.СтатистикаТестПлана();

	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(_ПутьКОтчету, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();

	ЗаписьXML.ЗаписатьНачалоЭлемента("testsuites");

	ЗаписьXML.ЗаписатьАтрибут("name",       "Test run");

	ЗаписьXML.ЗаписатьАтрибут("tests",      СтатистикаТестПлана.ПолучитьИлиУмолчание("ТестовОбнаружено", 0));
	ЗаписьXML.ЗаписатьАтрибут("failures",   СтатистикаТестПлана.ПолучитьИлиУмолчание("ТестовОшибка", 0));
	ЗаписьXML.ЗаписатьАтрибут("errors",     0);
	ЗаписьXML.ЗаписатьАтрибут("skipped",    СтатистикаТестПлана.ПолучитьИлиУмолчание("ТестовПропущено", 0));
	ЗаписьXML.ЗаписатьАтрибут("assertions", 0);

	ЗаписьXML.ЗаписатьАтрибут(
		"time",
		(СтатистикаТестПлана.ПолучитьИлиУмолчание("ВремяЗавершения", 0)
		- СтатистикаТестПлана.ПолучитьИлиУмолчание("ВремяНачала", 0))
		/ 1000
	);

	ЗаписьXML.ЗаписатьАтрибут(
		"timestamp",
		XMLСтрока(СтатистикаТестПлана.ПолучитьИлиУмолчание("ДатаЗавершения", '00010101'))
	);

	ЗаписьXML.ЗаписатьНачалоЭлемента("properties");

	СистемнаяИнформация = Новый СистемнаяИнформация();

	Рефлектор = Новый Рефлектор();
	Свойства = Рефлектор.ПолучитьТаблицуСвойств(СистемнаяИнформация);

	Для каждого Свойство Из Свойства Цикл

		Значение = СистемнаяИнформация[Свойство.Имя];

		Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
			Значение = СтрСоединить(Новый Массив(Значение), ",");
		КонецЕсли;

		ЗаписьXML.ЗаписатьНачалоЭлемента("property");
		ЗаписьXML.ЗаписатьАтрибут("name",  Свойство.Имя);
		ЗаписьXML.ЗаписатьАтрибут("value", Значение);

		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	Для каждого Набор Из ТестПлан.Дети() Цикл
		ВывестиТестНабор(ЗаписьXML, Набор);
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.Закрыть();

КонецПроцедуры

Процедура ВывестиТестНабор(ЗаписьXML, ТестНабор) Экспорт

	Если ТипЗнч(ТестНабор) = Тип("ОпределениеТестНабора") Тогда
		ЗавершенныеНаборы = _РепортерСтатистика.ЗавершенныеНаборы();
		ПропущенныеНаборы = _РепортерСтатистика.ПропущенныеНаборы();
		СтатистикаНабора  = _РепортерСтатистика.СтатистикаНабора(ТестНабор);
	Иначе
		ЗавершенныеНаборы = _РепортерСтатистика.ЗавершенныеТесты();
		ПропущенныеНаборы = _РепортерСтатистика.ПропущенныеТесты();
		СтатистикаНабора  = _РепортерСтатистика.СтатистикаТеста(ТестНабор);
	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента("testsuite");

	ЗаписьXML.ЗаписатьАтрибут("name",       ТестНабор.Имя());
	ЗаписьXML.ЗаписатьАтрибут("tests",      СтатистикаНабора.ПолучитьИлиУмолчание("ТестовОбнаружено", 0));
	ЗаписьXML.ЗаписатьАтрибут("failures",   СтатистикаНабора.ПолучитьИлиУмолчание("ТестовОшибка", 0));
	ЗаписьXML.ЗаписатьАтрибут("errors",     0);
	ЗаписьXML.ЗаписатьАтрибут("skipped",    СтатистикаНабора.ПолучитьИлиУмолчание("ТестовПропущено", 0));
	ЗаписьXML.ЗаписатьАтрибут("assertions", 0);

	ЗаписьXML.ЗаписатьАтрибут("time",
		(СтатистикаНабора.ПолучитьИлиУмолчание("ВремяЗавершения", 0)
		- СтатистикаНабора.ПолучитьИлиУмолчание("ВремяНачала", 0))
		/ 1000
	);

	ЗаписьXML.ЗаписатьАтрибут(
		"timestamp",
		XMLСтрока(СтатистикаНабора.ПолучитьИлиУмолчание("ДатаЗавершения", '00010101'))
	);

	ЗаписьXML.ЗаписатьАтрибут("file", ТестНабор.Путь());

	Вывод   = "";
	Причины = "";

	Если ЗавершенныеНаборы.СодержитКлюч(ТестНабор) Тогда

		Результат = ЗавершенныеНаборы.Получить(ТестНабор).Получить();

		Вывод = Результат.Вывод();

		Причины = Результат.Причины()
			.ПроцессорКоллекции()
			// Пропустим первый стек вызовов, так как он содержит информацию о вызове теста
			.Обработать("Причина -> ?(ЗначениеЗаполнено(Причина.Причина), Причина.Причина, Причина)")
			.Обработать("Причина -> ТестированиеСлужебный.ПодробноеОписаниеОшибки(""Причина"", Причина)")
			.ВСтроку(Символы.ПС);

	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента("properties");

	ЗаписьXML.ЗаписатьНачалоЭлемента("property");
	ЗаписьXML.ЗаписатьАтрибут("name", "tags");
	ЗаписьXML.ЗаписатьАтрибут("value", СтрСоединить(ТестНабор.Теги().ВМассив(), ","));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ПричинаПропуска = ПропущенныеНаборы.Получить(ТестНабор).Иначе_("");

	Если Не ПустаяСтрока(ПричинаПропуска) Тогда

		ЗаписьXML.ЗаписатьНачалоЭлемента("property");
		ЗаписьXML.ЗаписатьАтрибут("name", "skippedReason");
		ЗаписьXML.ЗаписатьАтрибут("value", ПричинаПропуска);
		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("system-out");

	Если Не ПустаяСтрока(Вывод) Тогда
		ЗаписьXML.ЗаписатьТекст(Символы.ПС);
		ЗаписьXML.ЗаписатьСекциюCDATA(Вывод);
		ЗаписьXML.ЗаписатьТекст(Символы.ПС);
	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("system-err");

	Если Не ПустаяСтрока(Причины) Тогда
		ЗаписьXML.ЗаписатьТекст(Символы.ПС);
		ЗаписьXML.ЗаписатьСекциюCDATA(Причины);
		ЗаписьXML.ЗаписатьТекст(Символы.ПС);
	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	// TODO: Выводить ли детей если пропущен?
	Если ЗавершенныеНаборы.СодержитКлюч(ТестНабор) Тогда

		Для Каждого Тест Из ТестНабор.Дети() Цикл

			Если Тест.ТипОпределения() = ТипыОпределенийТестов.Контейнер Тогда
				ВывестиТестНабор(ЗаписьXML, Тест);
			Иначе
				ВывестиТест(ЗаписьXML, Тест);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

Процедура ВывестиТест(ЗаписьXML, Тест) Экспорт

	ЗавершенныеТесты = _РепортерСтатистика.ЗавершенныеТесты();
	ПропущенныеТесты = _РепортерСтатистика.ПропущенныеТесты();
	СтатистикаТеста  = _РепортерСтатистика.СтатистикаТеста(Тест);

	ЗаписьXML.ЗаписатьНачалоЭлемента("testcase");
	ЗаписьXML.ЗаписатьАтрибут("name", Тест.Имя());

	Родитель = Тест.Родитель();

	Пока ТипЗнч(Родитель) <> Тип("ОпределениеТестНабора") Цикл
		Родитель = Родитель.Родитель();
	КонецЦикла;

	ЗаписьXML.ЗаписатьАтрибут("classname", Родитель.Имя());
	ЗаписьXML.ЗаписатьАтрибут("assertions", 0);

	ЗаписьXML.ЗаписатьАтрибут("time",
		(СтатистикаТеста.ПолучитьИлиУмолчание("ВремяЗавершения", 0)
		- СтатистикаТеста.ПолучитьИлиУмолчание("ВремяНачала", 0))
		/ 1000
	);

	ЗаписьXML.ЗаписатьАтрибут("file", Тест.Путь());
	ЗаписьXML.ЗаписатьАтрибут("line", 0);

	Вывод = "";

	Если ЗавершенныеТесты.СодержитКлюч(Тест) Тогда

		Результат = ЗавершенныеТесты.Получить(Тест).Получить();

		Вывод = Результат.Вывод();

		Если Результат.Результат() = РезультатыВыполненияТестов.Ошибка Тогда

			ЗаписьXML.ЗаписатьНачалоЭлемента("failure");
			ЗаписьXML.ЗаписатьАтрибут("message", Результат.ОписанияПричин());
			ЗаписьXML.ЗаписатьАтрибут("type", "");

			ЗаписьXML.ЗаписатьТекст(Символы.ПС);

			Причины = Результат.Причины()
				.ПроцессорКоллекции()
				// Пропустим первый стек вызовов, так как он содержит информацию о вызове теста
				.Обработать("Причина -> ?(ЗначениеЗаполнено(Причина.Причина), Причина.Причина, Причина)")
				.Обработать("Причина -> ТестированиеСлужебный.ПодробноеОписаниеОшибки(""Причина"", Причина)")
				.ВСтроку(Символы.ПС);

			ЗаписьXML.ЗаписатьСекциюCDATA(Причины);
			ЗаписьXML.ЗаписатьТекст(Символы.ПС);

			ЗаписьXML.ЗаписатьКонецЭлемента();

		КонецЕсли;

	Иначе

		Причина = ПропущенныеТесты.Получить(Тест).Иначе_("");

		ЗаписьXML.ЗаписатьНачалоЭлемента("skipped");
		ЗаписьXML.ЗаписатьАтрибут("message", Причина);
		ЗаписьXML.ЗаписатьКонецЭлемента();

	КонецЕсли;

	ЗаписьXML.ЗаписатьНачалоЭлемента("properties");

	ЗаписьXML.ЗаписатьНачалоЭлемента("property");
	ЗаписьXML.ЗаписатьАтрибут("name", "tags");
	ЗаписьXML.ЗаписатьАтрибут("value", СтрСоединить(Тест.Теги().ВМассив(), ","));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("system-out");

	Если Не ПустаяСтрока(Вывод) Тогда
		ЗаписьXML.ЗаписатьТекст(Символы.ПС);
		ЗаписьXML.ЗаписатьСекциюCDATA(Вывод);
		ЗаписьXML.ЗаписатьТекст(Символы.ПС);
	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("system-err");
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

&Желудь
Процедура ПриСозданииОбъекта(&Блестяшка ПутьКОтчетуJUnit, &Пластилин РепортерСтатистика)
	_ПутьКОтчету        = ПутьКОтчетуJUnit;
	_РепортерСтатистика = РепортерСтатистика;
КонецПроцедуры
